name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - staging
      - develop
      - "feature/*"
      - "skipe/*"

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: new-app-equipzilla # TODO: update to cluster name
  GKE_ZONE: us-central1 # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-app # TODO: update to deployment name
  REPOSITORY: repo-equipzilla # TODO: update to Artifact Registry docker repository
  IMAGE: equipzilla-image

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment:
      name: production

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Autenticarse con GitHub CLI usando token
        run: |
          echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

      - name: Utilizar Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: git checkout
        uses: actions/checkout@v3

      - name: Autenticar en Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Verificar si el repositorio de artefactos ya existe
        id: check_repo_exists
        run: |
          gcloud artifacts repositories describe $REPOSITORY --location=$GAR_LOCATION --format="value(name)" || exit 1
        continue-on-error: true

      - name: Crear repositorio en Artifact Registry si no existe
        if: steps.check_repo_exists.outcome != 'success'
        run: |
          gcloud artifacts repositories create $REPOSITORY --repository-format=docker --location=$GAR_LOCATION

      - name: Obtener credenciales de Kubernetes
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_ZONE --project $PROJECT_ID
          kubectl config use-context gke_${PROJECT_ID}_${GKE_ZONE}_${GKE_CLUSTER}

      - name: Configurar credenciales de GKE
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Autenticarse en Docker para Artifact Registry
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://europe-west1-docker.pkg.dev
          gcloud auth configure-docker \
          us-central1-docker.pkg.dev

      # Paso 2: Compilar y Publicar
      - name: Compilar y Publicar
        run: |
          if [[ $GITHUB_REF = "refs/heads/main" ]]; then
            # Desplegar en producción
            docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

            docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
          elif [[ $GITHUB_REF = "refs/heads/staging" ]] || [[ $GITHUB_REF == refs/heads/skipe/* ]]; then
            # Desplegar en entorno de staging
            docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

            docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
          elif [[ $GITHUB_REF = "refs/heads/develop" ]] || [[ $GITHUB_REF == refs/heads/feature/* ]]; then
            # Incorporar cambios en desarrollo
            docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

            docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

            if [[ $GITHUB_REF == refs/heads/feature/* ]]; then
              # Crear pull request de feature/* a develop
              gh pr create --base develop --head $GITHUB_REF --title "Pull Request para incorporar cambios en $GITHUB_REF a develop" --body "Descripción del pull request aquí"
            fi
          fi

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Paso 3: Desplegar archivos de Kubernetes
      # - name: Deploy
      #   run: |
      #     if [[ $GITHUB_REF = "refs/heads/main" ]]; then
      #       ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
      #       ./kustomize build . | kubectl apply -f -
      #       kubectl rollout status deployment/$DEPLOYMENT_NAME
      #       kubectl get services -o wide
      #     elif [[ $GITHUB_REF = "refs/heads/staging" ]] || [[ $GITHUB_REF == refs/heads/skipe/* ]]; then
      #       ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
      #       ./kustomize build . | kubectl apply -f -
      #       kubectl rollout status deployment/$DEPLOYMENT_NAME
      #       kubectl get services -o wide
      #     elif [[ $GITHUB_REF = "refs/heads/develop" ]] || [[ $GITHUB_REF == refs/heads/feature/* ]]; then
      #       ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
      #       ./kustomize build . | kubectl apply -f -
      #       kubectl rollout status deployment/$DEPLOYMENT_NAME
      #       kubectl get services -o wide
      #     fi

      # # Deploy the Docker image to the GKE cluster
      # - name: Deploy
      #   run: |-
      #     # replacing the image name in the k8s template
      #     ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
      #     ./kustomize build . | kubectl apply -f -
      #     kubectl rollout status deployment/$DEPLOYMENT_NAME
      #     kubectl get services -o wide
